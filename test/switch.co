switch 10
case 5 then ok 0
case 'a'
  true
  false
  ok 0
case 10 then ok 1

  # Mid-switch comment with whitespace

    # and multi line
case 11 then ok 0
default ok 0


func = (num) ->
  switch num
  case [2, 4, 6]
    true
  case [1, 3, 5]
    false
eq func(2), true
eq func(6), true
eq func(3), false
eq func(8), void


eq (switch case 1 then break), void
eq (switch case 0 then break default 1), 1
eq (switch case 1 then continue while 0; 1), 1
throws '''
switch (false) {
case !1:
  continue;
} // cannot be an expression
''', -> Coco.compile 'f(switch case 1 then continue)'


ok (switch 'words'
case (<[ nonbare words ]>) then false
case  <[    bare words ]>  then true
default false
), '`case`s can take bare arrays'


# Should be able to handle switches sans-condition.
result = switch
case null                    then 0
case !1                      then 1
case '' not in {''}          then 2
case [] not instanceof Array then 3
case true is false           then 4
case 'x' < 'y' > 'z'         then 5
case 'a' of  <[ b c ]>       then 6
case 'd' of (<[ e f ]>)      then 7
default ok
eq result, ok


eq '''
var that;
switch (false) {
case !1:
  return;
case !2:
  throw me;
case !3:
  continue;
case !4:
  break;
case !5:
  /* fallthrough */
case !(that = 6):
  that;
  break;
case !7:
  break;
case !void 8:
  break;
default:
  8;
}
''', Coco.compile '''
switch
case 1 then return
case 2 then throw me
case 3 then continue
case 4 then break
case 5 then fallthrough
case 6 then that
case 7 then
case[,]then
default 8
''', {+bare}


# `that`
eq 1, (switch 1 case 1 then that)

while 1 then eq 3, (switch 3 case 3 then that); break

switch case [0, 2, 4,] then eq 2, that
