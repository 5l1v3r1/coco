### `export`
out = exports ? this
{random} = Math

a = random!
export a
export b = random!
eq out.a, a
eq out.b, b

export class C
  @d = random!
  export @d, @e = random!
ok new out.C instanceof C
eq out.d, C.d
eq out.e, C.e

export function f
  g
export
  function g then h
  function h then f
eq out.f!, g
eq out.g!, h
eq out.h!, f

export
  I: i = random!
  J: j = random!
eq out.I, i
eq out.J, j

o = k: random!
export do -> o
eq out.k, o.k


### `const`
let
  const a = 1
  const b = 2, c = 3
  const
    d = 4
    [e, f] = [5, 6]
  eq '1,2,3,4,5,6' [a, b, c, d, e, f]join!

throws 'redeclaration of read-only variable "a" on line 2' -> Coco.compile """
  const a = 0
  a = 1
"""
throws 'redeclaration of read-only variable "a" on line 2' -> Coco.compile """
  a = 2
  const a = 3
"""
throws 'redeclaration of read-only variable "a" on line 2' -> Coco.compile """
  const a = 4
  function a then 5
"""
throws 'assignment to constant variable "a" on line 2' -> Coco.compile """
  const a = 6
  -> a := 7
"""
throws 'increment of constant variable "a" on line 2' -> Coco.compile """
  const a = 8
  ++a
"""
throws 'invalid constant variable declaration on line 2' ->
  Coco.compile 'const\n a'


### `var`
let
  var a
  var b, c
  var
    d
    e
  ok a is b is c is d is e is void

throws 'invalid variable declaration on line 2' -> Coco.compile 'var\n  0'
