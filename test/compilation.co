# Ensure that carriage returns don't break compilation on Windows.
eq 'one;\ntwo;', Coco.compile 'one\r\ntwo', {+bare}


# Tab characters should work.
eq '_(_);', Coco.compile '\n\t_\t_\t\n', {+bare}


# `globals: true` removes `var`s
eq '''
(function(){
  __slice = [].slice;
  f.apply(null, __slice.call(a).concat([b]));
}).call(this);

''', Coco.compile 'f ...a, b', {+globals}


# [coffee#750](https://github.com/jashkenas/coffee-script/issues/750)
throws 'unclosed CALL( on line 1', -> Coco.nodes 'f(->'


throws 'missing " in a string on line 3', -> Coco.nodes '\n\n"\n'

throws 'unterminated JS literal on line 3', -> Coco.nodes '\n\n```\n'
throws 'unterminated string on line 3'    , -> Coco.nodes "\n\n'\n"
throws 'unterminated words on line 3'     , -> Coco.nodes '\n\n<[\n'
throws 'unterminated heregex on line 3'   , -> Coco.nodes '\n\n///\n'


eq 'for (k in o) {}'
, Coco.compile 'for k in o then', {+bare, +globals}


eq '''
/* (c) 2010 me */
"use strict";
var I;
LABEL:
I = function(it){
  return it;
};
''', Coco.compile '''
/* (c) 2010 me */
"use strict"
`LABEL:`
I = -> it
''', {+bare}


eq "a['in'] = this['in'];", Coco.compile 'a import {@in}', {+bare}


eq '''
while (0) {
  while (0) {
    (1, 2);
  }
}
''', Coco.compile '(1; 2) while 0 while 0', {+bare}


throws 'invalid use of void on line 1', -> Coco.compile 'do void'
throws 'invalid use of null on line 1', -> Coco.compile 'null.po'

throws 'invalid property name "this.p" on line 1', -> Coco.compile '{@p:@}'

throws 'deprecated octal literal 0666 on line 1' ,-> Coco.tokens '0666'
throws 'invalid radix 1 on line 1'               ,-> Coco.tokens '1r0'
throws 'invalid radix 37 on line 1'              ,-> Coco.tokens '37r0'
throws 'invalid number 8 in base 8 on line 1'    ,-> Coco.tokens '8r8'


eq '(function(){}());', Coco.compile 'do->', {+bare}


tokens = Coco.lex '''
"""
  1 #{
    2
    3
  } 4
"""
<[
  7
  8
]>
'''
eq tokens.join('\n'), '''
(,(,1
STRNUM,"1 ",1
+-,+,1
(,(,2
INDENT,2,2
STRNUM,2,2
TERMINATOR,
,3
STRNUM,3,3
DEDENT,2,3
),),3
+-,+,3
STRNUM," 4",4
),,4
TERMINATOR,
,6
[,[,6
STRNUM,'7',7
STRNUM,'8',8
],],9
TERMINATOR,
,9
'''


# Indentation on line 1 should be valid.
eq '1;\n2;', Coco.compile '  1\n  2', {+bare}


eq '''
(function(){
  var k, _fn = function(k){
    return __clone(_this);
  }, _this = this, __clone = function(it){
    function fn(){ if (this.__proto__ !== it) this.__proto__ = it }
    return fn.prototype = it, new fn;
  };
  try {
    for (k in o) {
      _fn(k);
    }
  } catch (_e) {}
}).call(this);

''', Coco.compile '''try for k in o then do ~> @{}'''


eq 'STRNUM,0,0 STRNUM,1,1', '' + Coco.lex('''
0 \\
  1
''').slice(0 2).join ' '


eq '''
(function(){
  var _ref;
  throw a < (_ref = +b) && _ref < c;
}());
''', Coco.compile '(throw a < +b < c)' {+bare}


eq '!a;', Coco.compile '!!!a' {+bare}


eq '+(function(){ debugger }());', Coco.compile '+debugger' {+bare}


eq '1;\n2;\n3;\n4;', Coco.compile '''
  1
2
    3
  4
''' {+bare}


# [#1](https://github.com/satyr/coco/issues/1)
λ = -> 七 = 7
eq λ(), 7
