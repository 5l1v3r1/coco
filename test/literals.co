a = [((x) -> x), ((x) -> x * x)]
eq a.length, 2


eq (3 -4), -1


# Decimal number literals.
eq 1.0, .25 + .75
eq 0.5, 0.0 + -.25 - -.75 + 0.0

# With comments.
eq 1year * 365.25days * 24hours, 8766


eq void, do ->


# Trailing commas.
eq [1, 2,] + '', '1,2'

sum  = 0
sum += n for n of [
  1, 2, 3,
  4  5  6
  7, 8  9
]
eq sum, 45

o = {k1: "v1", k2: 4, k3: (-> true),}
ok o.k3() and o.k2 is 4 and o.k1 is "v1"


ok {a: (num) -> num is 10 }.a 10


moe = {
  name:  'Moe'
  greet: (salutation) ->
    salutation + " " + @name
  hello: ->
    @['greet'] "Hello"
  10: 'number'
}

eq moe.hello() ,"Hello Moe"
eq moe[10]     ,'number'

moe.hello = -> this['greet'] "Hello"

eq moe.hello(), 'Hello Moe'


obj = {
  is:     -> true,
  'not':  -> false,
}

ok obj.is()
ok not obj.not()


### Top-level braceless object ###
obj: 1
### doesn't break things. ###


# Implicit objects with number arguments.
k1: eq 1, 1
k2: eq 2, 2,


# Funky indentation within non-comma-seperated arrays.
result = [['a']
 {b: 'c'}]

eq 'a', result[0][0]
eq 'c', result[1]['b']


# Object literals should be able to include keywords.
obj = class: 'hot'
obj.function = 'dog'
eq obj.class + obj.function, 'hotdog'


# New fancy implicit objects.
config =
  development:
    server: 'localhost'
    timeout: 10

  production:
    server: 'dreamboat'
    timeout: 1000

eq config.development.server  ,'localhost'
eq config.production.server   ,'dreamboat'
eq config.development.timeout ,10
eq config.production.timeout  ,1000

obj =
  a: 2
  b: 3

eq 6, obj.a * obj.b

obj =
  a: 2,
  b: 3,

eq 6, obj.a * obj.b


# Implicit objects nesting.
obj =
  options:
    value: true

  fn: ->
    {}
    null

eq true, obj.options.value
eq null,  obj.fn()


third = (a, b, c) -> c
obj =
  one: 'one'
  two: third 'one', 'two', 'three'

eq obj.one, 'one'
eq obj.two, 'three'


# Implicit objects with wacky indentation:
obj =
  'reverse': (obj) ->
    Array.prototype.reverse.call obj
  abc: ->
    @reverse(
      @reverse @reverse ['a', 'b', 'c'].reverse()
    )
  one: [1, 2,
    a: 'b'
  3, 4]
  red:
    orange:
          yellow:
                  green: 'blue'
    indigo: 'violet'
  misdent: [[],
  [],
                  [],
      []]

eq obj.abc() + ''   ,'a,b,c'
eq obj.one.length   ,5
eq obj.one[4]       ,4
eq obj.one[2].a     ,'b'
eq obj.red.indigo   ,'violet'
eq obj.misdent + '' ,',,,'
eq obj.red.orange.yellow.green, 'blue'
eq 2, (key for key in obj.red).length


# Implicit objects as part of chained calls.
pluck = (x) -> x.a
eq 100, pluck pluck pluck a: a: a: 100


eq '\\`', `
  // Inline JS
  "\\\`"
`

i = 3
`LABEL:`
while --i then while --i then `break LABEL`
eq i, 1


# Braceless objects.
obj =
  ### comment one ###
  ### comment two ###
  one: 1, two: 2
  fun: -> [zero: 0; three: @one + @two][1]

eq obj.fun().three, 3


# Dynamic object keys.
i = 0
o = splat: 'me'
obj = {
  ### leading comment  ###
  (4 * 2): 8
  ### cached shorthand ###
  (++i)
  ###      splat       ###
  ...o
  ...({splatMe: 'too'})
  ###   normal keys    ###
  key: ok
  's': ok
  0.0: ok

  "#{'interpolated'}":
    """#{"nested"}""": 123: 456
  ### traling comment  ###
}
eq obj.interpolated.nested[123], 456
eq obj[8], 8
eq obj[1], 1
eq obj.splat  , 'me'
eq obj.splatMe, 'too'
ok obj.key is obj.s is obj[0]

eq 'braceless dynamic key',
  (key for key in """braceless #{ 0 in ((0):(0)) and 'dynamic' } key""": 0)[0]

obj =
  one: 1
  (1 + 2 * 4): 9
eq obj[9], 9, 'trailing dynamic property should be braced as well'

obj.key = 'val'
obj.val = ok
{(obj.key)} = obj
eq ok, obj.key


eq '<[ quoted words ]>', <[ <[ quoted words ]\> ]>.join ' '
eq  1, <[]>.length
eq '', <[]>[0]


# [coffee#542](https://github.com/jashkenas/coffee-script/issues/542)
# Objects leading expression statement should be parenthesized.
{f: -> ok true }.f() + 1

# [coffee#764](https://github.com/jashkenas/coffee-script/issues/764)
# Boolean/Number should be indexable.
ok 42['toString']
ok true['toString']


ok 2r101010 == 8r52 == 36r16 == 42


# [#19](https://github.com/satyr/coco/issues/19)
throws 'duplicate property name "a" on line 1'
, -> Coco.compile 'a: 1, b: 2, a: 3'


# [#1](https://github.com/satyr/coco/issues/1)
λ = -> 七 = 7
eq λ(), 7


# [#31](https://github.com/satyr/coco/issues/31)
eq '1,2,3'  ,''+ [1 to +3]
eq '1,0,-1' ,''+ Array 1 to -1 by -1

throws 'range limit exceeded on line 1' , -> Coco.tokens '0 to 1 by 1e-4'
throws 'empty range on line 3'          , -> Coco.tokens '\n\n 1 to 0'


# Primitive sequences.
eq null null
eq \1 \1
eq 2 2
eq '0,true,2', '' + [0 true \2]

o = {0 \1 \2 3 4}
eq o.1, \1
eq o.3, 3


throws 'stub code executed', -> ...


# [#5](https://github.com/satyr/coco/issues/5): Accessor Properties
{}.__defineGetter__ and Coco.run '''
  v = 'foo'
  o =
    key: ~      -> @x
    key: ~ (@x) ->
    (v): ~      -> @y
    (v): ~ (@y) ->
  ok 'key' in o
  eq 1, o.key = 1
  eq 1, o.key
  ok 'foo' in o
  eq 2, o.foo = 2
  eq 2, o.foo
'''
