eq '(((dollars)))', '\(\(\(dollars\)\)\)'
eq 'one two three', "on
e tw
o three"
eq "four five", 'fou

r five'

# [coffee#647](https://github.com/jashkenas/coffee-script/issues/647)
eq "''Hello, World\\''", '''
'\'Hello, World\\\''
'''
eq '""Hello, World\\""', """
"\"Hello, World\\\""
"""
eq 'Hello, World\n', '''
Hello, World\

'''


hello = 'Hello'
world = 'World'
eq '#{hello} #{world}!', '#{hello} #{world}!'
eq "#{hello} #{world}!", 'Hello World!'
eq "[#{hello}#{world}]", '[HelloWorld]'
eq "#{hello}##{world}", 'Hello#World'
eq "Hello #{ 1 + 2 } World", 'Hello 3 World'
eq "#{hello} #{ 1 + 2 } #{world}", "Hello 3 World"


[s, t, r, i, n, g] = ['s', 't', 'r', 'i', 'n', 'g']
eq "#{s}#{t}#{r}#{i}#{n}#{g}", 'string'
eq "\#{s}\#{t}\#{r}\#{i}\#{n}\#{g}", '#{s}#{t}#{r}#{i}#{n}#{g}'
eq "\#{string}", '#{string}'


eq "\#{Escaping} first", '#{Escaping} first'
eq "Escaping \#{in} middle", 'Escaping #{in} middle'
eq "Escaping \#{last}", 'Escaping #{last}'


eq "##", '##'
eq "#{}", ''
eq "#{}A#{} #{} #{}B#{}", 'A  B'
eq "\\\#{}", '\\#{}'
eq "#{

}", ''


eq "I won ##{20} last night.", 'I won #20 last night.'
eq "I won ##{'#20'} last night.", 'I won ##20 last night.'


eq "#{hello + world}", 'HelloWorld'
eq "#{hello + ' ' + world + '!'}", 'Hello World!'


list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
eq "values: #{list.join(', ')}, length: #{list.length}.", 'values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, length: 10.'
eq "values: #{list.join ' '}", 'values: 0 1 2 3 4 5 6 7 8 9'


obj = {
  name: 'Joe'
  hi: -> "Hello #{@name}."
  cya: -> "Hello #{@name}.".replace('Hello','Goodbye')
}
eq obj.hi(), "Hello Joe."
eq obj.cya(), "Goodbye Joe."


eq "With #{"quotes"}", 'With quotes'
eq 'With #{"quotes"}', 'With #{"quotes"}'

eq "Where is #{obj["name"] + '?'}", 'Where is Joe?'

eq "Where is #{"the nested #{obj["name"]}"}?", 'Where is the nested Joe?'
eq "Hello #{world ? "#{hello}"}", 'Hello World'

eq "Hello #{"#{"#{obj["name"]}" + '!'}"}", 'Hello Joe!'


a = """
    Hello #{ "Joe" }
    """
eq a, "Hello Joe"


a = 1
b = 2
c = 3
eq "#{a}#{b}#{c}", '123'


result = null
stash = -> result := it
stash "a #{ ('aa').replace /a/g, 'b' } c"
eq result, 'a bb c'


foo = "hello"
eq "#{foo.replace("\"", "")}", 'hello'


a = """
    basic heredoc
    on two lines
    """

eq a, "basic heredoc\non two lines"


a = '''
    a
      "b
    c
    '''

eq a, "a\n  \"b\nc"


a = """
a
 b
  c
"""

eq a, "a\n b\n  c"


a = '''one-liner'''

eq a, 'one-liner'


a = """
      out
      here
"""

eq a, "out\nhere"


a = '''
       a
     b
   c
    '''

eq a, "    a\n  b\nc"


a = '''
a


b c
'''

eq a, "a\n\n\nb c"


a = '''more"than"one"quote'''

eq a, 'more"than"one"quote'


val = 10

a = """
    basic heredoc #{val}
    on two lines
    """

b = '''
    basic heredoc #{val}
    on two lines
    '''

eq a, "basic heredoc 10\non two lines"
eq b, "basic heredoc \#{val}\non two lines"


a = '''here's an apostrophe'''
eq a, "here's an apostrophe"


# The indentation detector ignores blank lines without trailing whitespace
a = """
    one
    two

    """
ok a, "one\ntwo\n"


eq ''' line 0
    should not be relevant
      to the indent level
''', ' line 0
  \nshould not be relevant
  \n  to the indent level'


eq ''' '\\\' ''', " '\\' "
eq """ "\\\" """, ' "\\" '


eq '''  <- keep these spaces ->  ''', '  <- keep these spaces ->  '


eq 'multiline nested "interpolations" work', """multiline #{
  "nested #{
    ok true
    "\"interpolations\""
  }"
} work"""


eq 'word', \word
eq \c, 'c'
eq('+', \+)
eq '\\', [\\\].0
eq '$', {\$}.\$
eq \\\, \\

# [coffee#923](https://github.com/jashkenas/coffee-script/issues/923)
eq "#{ "{" }", "{"
eq "#{ '#{}}' } }", '#{}} }'
