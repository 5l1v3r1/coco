# Basic chained function calls.
identityWrap = (x) -> -> x
eq true, identityWrap(identityWrap(true))()()


# Chained accesses split true period/newline, backwards and forwards.
str = 'god'

eq \dog, str.
  split('').
  reverse().
   reverse().
     reverse().
  join('')

result = '' + str
  .replace /.$/ -> it.toLowerCase()
  .split('')
  .reverse()
   .reverse()
    .reverse()
  .join ''
eq \dog, result


# Newline suppression for binary operators.
eq 32,
  1 *
  2 +
  3 -
  4 <<
  5


# Ensure that indented array literals don't trigger whitespace rewriting.
eq 2 [
  [[[[],
     []],
  [[]]]],
[]].length

eq 'Hello', String(
              """
              Hello
              """)


eq msg = 'other accessors should also continue lines',
  msg
  .~toString
  ?.valueOf()()


aps = Array.prototype.toString
eq aps, Array::toString
eq aps, Array::\toString
eq 0, (:::0)::

# Length Star
eq [1, 2, 3][*-1], 3
eq 0[*], void
eq [0][*-*], 0


parent =
  child:
    method: -> @member
    member: 42
eq 42, do(0; parent.child.~method)
eq 42, do(0; parent.child~"me#{'th'}od")
eq 42, parent.child . ~ [\method] null


# Bracketless Access
a = [0]
eq 0, a.0
eq 0, a."0"
eq 0, a."#{0}"
eq 0, a.(0)
eq 0, [a].0.0
eq a.* = 1, a.1
eq '0'.0, '10'.1

eq 1, [-> it]. 0  1
eq 1, [-> it].'0' 1


# Dots have to workaround syntax error when accessing a simple number.
eq '0 .go;'  , Coco.compile '0.go', {+bare}
# Brackets don't.
eq "0['do'];", Coco.compile '0.do', {+bare}


eq '2,3', '' + [3,2][1,0]
eq '2,3', '' + [0,1,2,3][*-2,*-1]
eq '2,3', '' + {2,3}<[2 3]>
eq '-Infinity,Infinity', '' + Number[\NEGATIVE_INFINITY, \POSITIVE_INFINITY]


# Implicit Indexing (automatic dot insertion)
eq @toString, @\toString
eq @toString, @"to#{\S}tring"

{ok}\ok 1
[ok]0 1

eq 0 [[0]]0.0


# Semiautovivification
o = {}
o.!a.@b .push 0 1
o.a!c@d .push 2 3
o?.!a.e = 4
eq '0,1' ''+o.a.b
eq '2,3' ''+o.a.c.d
eq 4 o.a.e
