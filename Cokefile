fs            = require 'fs'
Coco          = require './lib/coco'
{spawn, exec} = require 'child_process'

# ANSI Terminal Colors.
bold  = '\033[0;1m'
red   = '\033[0;31m'
green = '\033[0;32m'
reset = '\033[0m'

# Run a Coco through our node/coco interpreter.
run = (args) ->
  proc = spawn 'bin/coco', args
  proc.stderr.on 'data', -> console.log "#{it}"
  proc       .on 'exit', -> process.exit 1 if it isnt 0

# Log a message with a color.
log = (message, color, explanation) ->
  console.log color + message + reset + ' ' + (explanation or '')

sources = ->
  ext = /\.co(?:ffee)?$/i
  'src/' + file for file of fs.readdirSync 'src' when ext.test file

coreSources = ->
  "src/#{src}.coffee" for src of <[coco grammar lexer nodes rewriter scope]>

option '-p', '--prefix [DIR]', 'set the installation prefix for `coke install`'

task 'install', 'install Coco into /usr/local (or --prefix)', (options) ->
  base = options.prefix or '/usr/local'
  lib  = "#{base}/lib/coco"
  bin  = "#{base}/bin"
  node = "~/.node_libraries/coco"
  console.log "Installing Coco to #{lib}"
  console.log "Linking to #{node}"
  console.log "Linking 'coco' to #{bin}/coco"
  exec [
    "mkdir -p #{lib} #{bin}"
    "cp -rf bin lib LICENSE README.md package.json src #{lib}"
    "ln -sf #{lib}/bin/coco #{bin}/coco"
    "ln -sf #{lib}/bin/coke #{bin}/coke"
    "mkdir -p ~/.node_libraries"
    "ln -sf #{lib}/lib #{node}"
  ].join(' && '), (err, stdout, stderr) ->
    if err then console.log stderr.trim() else log 'done', green


task 'build', 'build the Coco language from source', ->
  run <[ -c -o lib ]>.concat sources()

task 'build:full', 'rebuild the source twice, and run the tests', ->
  exec 'bin/coke build && bin/coke build && bin/coke test', (err, stdout, stderr) ->
    console.log stdout.trim() if stdout
    console.log stderr.trim() if stderr
    throw err                 if err

task 'build:parser', 'rebuild the Jison parser (run build first)', ->
  fs.writeFile 'lib/parser.js', require('./lib/grammar').parser.generate()

task 'build:browser', 'rebuild the merged script for inclusion of the browser', ->
  code  = ''
  code += """
    require['./#{name}'] = new function(){
      var exports = this;
      #{ fs.readFileSync "lib/#{name}.js" }
    };
  """ for name of <[ rewriter lexer parser scope nodes coco browser ]>
  {parser, uglify} = require 'uglify-js'
  ast = uglify.ast_mangle parser.parse """
    this.Coco = function(){
      function require(path){ return require[path] }
      #{code}
      return require['./coco']
    }()
  """
  fs.writeFileSync 'extras/coco.js', """
    // Coco Compiler v#{Coco.VERSION}
    // http://github.com/satyr/coco
    // Copyright 2010, Jeremy Ashkenas + Satoshi Murakami
    // Released under the MIT License
    #{ uglify.gen_code uglify.ast_squeeze ast, extra: true }

  """
  invoke 'test:browser'


task 'bench', 'quick benchmark of compilation time', ->
  RW     = require './lib/rewriter'
  co     = coreSources().map(-> fs.readFileSync it).join '\n'
  fmt    = -> " : #{bold}#{ "   #{it}".slice -4 }#{reset}[ms]"
  total  = 0
  now    = Date.now()
  time   = -> total += ms = -(now - now := Date.now()); fmt ms
  tokens = Coco.tokens co, rewrite: false
  console.log "Lex    #{time()} (#{tokens.length} tokens)"
  RW.rewrite tokens
  console.log "Rewrite#{time()} (#{tokens.length} tokens)"
  nodes  = Coco.nodes tokens
  console.log "Parse  #{time()}"
  js     = nodes.compile bare: true
  console.log "Compile#{time()} (#{js.length} chars)"
  console.log "TOTAL  #{ fmt total }"

task 'loc', 'count the lines of source code in the Coco compiler', ->
  exec """
    cat #{ coreSources().join ' ' } | \\
    grep -v '^\\( *#\\|\\s*$\\)' | wc -l | tr -s ' '
  """, (err, out) -> console.log out.trim()


runTests = (Coco) ->
  path = require 'path'
  startTime = Date.now()
  passedTests = failedTests = 0
  for all name, func in require 'assert' then do ->
    global[name] = ->
      func arguments...
      ++passedTests
  global.eq = global.strictEqual
  global.throws = (msg, fun) ->
    try do fun catch e then return eq e.message, msg
    ok false, 'should throw: ' + msg
  global.Coco = Coco
  process.on 'exit', ->
    time = ((Date.now() - startTime) / 1000).toFixed(2)
    message = "passed #{passedTests} tests in #{time} seconds#{reset}"
    if failedTests
    then log "failed #{failedTests} and #{message}", red
    else log message, green
  fs.readdir 'test', (err, files) ->
    files.forEach (file) ->
      return unless /\.co(?:ffee)?$/i.test file
      fs.readFile (fileName = path.join 'test', file), (err, code) ->
        try Coco.run code += '', {fileName}
        catch e
          ++failedTests
          {1: row, 2: col} =
            ///#{fileName}:(\d+):(\d+)\)?$///m.exec(e.stack) or ''
          log "failed #{fileName}:#{row--}:#{col--}",
              red, '\n' + /^.+/.exec e.stack
          {(row): line} = lines = Coco.compile(code).split '\n'
          console.log lines.slice(row-5, row+0).join '\n'
          console.log line.slice(0, col) + bold + line.slice(col) + reset
          console.log lines.slice(row+1, row+6).join '\n'

task 'test', 'run the Coco language test suite', -> runTests Coco

task 'test:browser', 'run the test suite against the merged browser script', ->
  runTests new -> eval fs.readFileSync 'extras/coco.js', 'utf-8'
