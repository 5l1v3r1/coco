# Quick and dirty implementation of
# [code-illuminated](http://code.google.com/p/code-illuminated/)-esque
# annotated source viewer, powered by
# [showdown](http://attacklab.net/showdown/) and
# [google-code-prettify](http://code.google.com/p/google-code-prettify/).
#
# View [source](#) for usage.

{title} = document

docs = document.getElementById \docs or lmn \div, id: \docs
navi = document.getElementById \navi or do ->
  h  = '<div class=pointee>&#x2935;</div>'
  h += "<h1>#{title}</h1>" if title
  h += "<li><a href=##{co}>#{co}</a>" for co of sources
  lmn \ul, id: \navi, innerHTML: h
sdcv = new Showdown.converter
htms = __proto__: null

do @onhashchange = ->
  unless page = /^\D+(?=(\d*)$)/.exec location.hash.slice 1
    document <<< {title}
    navi.className = docs.innerHTML = ''
    return
  navi.className = \menu
  docs.innerHTML = \...
  [name] = page
  return load page, that if htms[name]
  xhr = new XMLHttpRequest
  xhr.open \GET, if name isnt \Cokefile then name + \.co else name, true
  xhr.overrideMimeType? \text/plain
  xhr.onreadystatechange = ->
    load page, htms[name] = build name, xhr.responseText if xhr.readyState is 4
  xhr.send null

function lmn (name, attrs) ->
  document.body.appendChild document.createElement(name) <<<< attrs

function load ([name, sect], html) ->
  document.title = name + (title and ' - ' + title)
  docs.innerHTML = html
  document.getElementById(sect).scrollIntoView() if sect
  prettyPrint()

function build (name, source) ->
  htm = comment = code = i = ''
  re  = /^[^\n\S]*#(?!##[^#]|{) ?(.*)/
  for line of source.split \\n
    unless line
      br = true
      code &&+= \\n
      continue
    if re.exec line
      if code or comment and br
        htm += block name, comment, code, i++
        comment = code = ''
      comment += that.1 + \\n
    else
      code += line + \\n
    br = false
  htm += block name, comment, code, i if comment
  "<h1>#{name}</h1>" + htm + '<br clear=both>'

function block (name, comment, code, i) ->
  code &&= """
   <pre class="code prettyprint lang-co"
    >#{ code.replace(/&/g, '&amp;').replace(/</g, '&lt;') }</pre>
  """
  """
   <div id=#{i} class=block><div class=comment
    ><a class=anchor href=##{name}#{i}>##{i}</a
    >#{ sdcv.makeHtml comment }</div
    >#{code}</div>
  """

#### Syntax Highlight
# ref. [google-code-prettify](http://code.google.com/p/google-code-prettify/source/browse/trunk/src/prettify.js)

##### Main

PR.registerLangHandler do
  PR.createSimpleLexer do
    [[\str /^\\\S[^\s,;)}\]]*/ 0 \\]
     [\str /// ^ ' (?: ''[^]*?'' | [^\\']*(?:\\.[^\\']*)* ) ' /// 0 \']
     [\lang-qq /^("""[^]*?""")/ 0 \"]
     [\lang-qq /// ^ ( " [^\\"]*(?:\\.[^\\"]*)* " ) /// 0 \"]
     [\lang-qr /// ^ ( /{3} [^]+? /{3} [imgy]{0,4} ) (?!\w) /// 0 \/]
     [\com /// ^ \# (?: \##[^#][^]*?### | .*) /// 0 \#]
     [\typ /// ^ (?
     : 0x[\da-f]+
     | [1-9]\d? r [\da-z]+
     | (?:\d+(?:\.\d+)?) (?:e[+-]?\d+)? [a-z]*
     ) ///i 0 \0123456789]
     [\lang-js /^`([^\\`]*(?:\\.[^\\`]*)*)`/ 0 \`]]
    # ref. [retrie](https://github.com/satyr/retrie)
    [[\pln /// ^ (?
     : (?: \@ | (?:\.|::) \s* ) [$A-Za-z_\x7f-\uffff][$\w\x7f-\uffff]*
     | [$A-Za-z_\x7f-\uffff][$\w\x7f-\uffff]* [^\n\S]* : (?!:)
     | \.{3}
     ) ///]
     [\kwd /// ^ (?
     : t(?:ry|h(?:row|en)|ypeof)
     | f(?:or(?: own)?|inally|unction)
     | n(?:ew|ot)
     | c(?:ontinue|a(?:se|tch)|lass)
     | i(?:f|n(?:stanceof)?|mport(?: all)?|s(?:nt)?)
     | e(?:lse|xtends)
     | d(?:e(?:fault|lete|bugger)|o)
     | un(?:less|til)
     | o[fr] | return | break | while | switch | and
     ) \b ///]
     [\typ /// ^ (?: true | false | null | void ) \b ///]
     [\ctx /// ^ (?
     : (?: th(?:is|at) | it | super | arguments | eval ) \b
     | @[@\d]?
     ) ///]
     [\glb /// ^ (?
     : Array | Boolean | Date | Error | Function | JSON | Math | Number
     | Object | RegExp | S(?:tring|yntaxError) | TypeError
     ) \b(?![^\n\S]*:(?!:)) ///]
     [\var /^[$A-Za-z_\x7f-\uffff][$\w\x7f-\uffff]*/]
     [\str /^<(?!<)\[[^]*?]>/]
     [\lang-r /// ^ [^/] ( / (?![\s/])
       [^ [ / \n \\ ]*
       (?:
         (?
         : \\[^]
         | \[
             [^ \] \n \\ ]*
             (?: \\[^] [^ \] \n \\ ]* )*
            ]
         ) [^ [ / \n \\ ]*
       )* / [imgy]{0,4} ) (?!\w)
     ///]]
  [\co]

##### Interpolations
PR.registerLangHandler do
  PR.createSimpleLexer do
    [[\lang-co /^#({[^]+?})/ 0 \#]]
    [[\str /^[^]+?/]]
  [\qq]

PR.registerLangHandler PR.createSimpleLexer([], [[\lit /^[^]+/]]), [\r]
PR.registerLangHandler do
  PR.createSimpleLexer do
    [[\lang-co /^#({[^]+?})/ 0 \#]
     [\com /^\s#(?!{).*/ 0 ' \t\n']]
    [[\lit /^[^]+?/]]
  [\qr]
