# `coke` is a simplified version of [Make](http://www.gnu.org/software/make/)
# ([Rake](http://rake.rubyforge.org/), [Jake](http://github.com/280north/jake))
# for Coco. You define tasks with names and descriptions in a Cokefile,
# and can call them from the command line, or invoke them from other tasks.
#
# Running `coke` with no arguments will print out a list of all the tasks in the
# current directory's Cokefile.

# Keep track of the list of defined tasks, the accepted options, and so on.
Tasks    = __proto__: null
Aliases  = __proto__: null
Flags    = {}
Options  = {}

# The top-level objects for Cokefiles to use directly.
global import
  Coco : require \./coco
  fs   : require \fs
  path : require \path

  # Define a coke task with a short name, an optional sentence description,
  # and the function to run as the action itself.
  task: (name, description, action) ->
    [action, description] = [description, ''] unless action
    Aliases[name.split(/\W+/).filter(String).map(-> it.0).join ''] ||= name
    Tasks[name] = {name, description, action}

  # Define an option that the Cokefile accepts. The parsed options hash,
  # containing all of the command-line options passed, will be made available
  # as the first argument to the action.
  option: (name, ...spec) -> Flags[name] = spec

  # Invoke another task in the current Cokefile.
  invoke: (name) ->
    unless task = Tasks[name] or Tasks[Aliases[name]]
      console.error 'no such task: "%s"', name
      process.exit 1
    task.action Options

  # Utilities.
  say   : -> process.stdout.write it + \\n
  slurp : -> '' + fs.readFileSync ...
  spit  : fs.writeFileSync
  dir   : fs.readdirSync

# Run `coke`. Executes all of the tasks you pass, in order. Note that Node's
# asynchrony may cause tasks to execute in a different order than you'd expect.
# If no tasks are passed, print the help screen.
exports.run = ->
  args = process.argv.slice 2
  fileName = args.splice(0 2).1 if args.0 of <[ -f --cokefile ]>
  path.exists fileName ||= \Cokefile, ->
    unless it
      console.error 'no "%s" in %s', fileName, process.cwd()
      process.exit 1
    Coco.run slurp(fileName), {fileName}
    Options := require(\./optparse) Flags, args
    if args.length
    then Options.$args.forEach invoke
    else printTasks()
    void

# Display the list of tasks in a format similar to `rake -T`.
printTasks = ->
  say ''
  width = Math.max ...Object.keys(Tasks).map -> it.length
  pad   = Array(width >> 1).join '  '
  for name, task in Tasks
    say "coke #{ (name + pad).slice 0, width }  #{task.description}"
  for _ in Flags
    say \\n + Options
    break
  say '''

    Coke options:
      -f, --cokefile FILE  use FILE as the Cokefile
  '''
