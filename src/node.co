#### [node.js](http://nodejs.org) setups
# - Override `.run`.
# - Inherit `EventEmitter`.
# - Register _.co_ extension.

module.exports = (Coco) ->
  fs   = require \fs
  path = require \path

  Coco.run = (code, options or {}) ->
    {main} = require
    main.moduleCache &&= {}
    # Hack for relative `require`.
    filename = \.
    if options.filename
      main.paths = main.._nodeModulePaths path.dirname that
      filename = process.argv.1 = path.resolve that
    main <<< {filename}
    options.js or code = Coco.compile code, options
    try main._compile code, filename catch throw hackTrace e, code, filename

  Coco import all require(\events)EventEmitter::

  require.extensions\.co = (module, filename) ->
    fs.readFileSync filename, \utf8 =>
    js = Coco.compile _, {filename, +bare, +lineno}
    try module._compile js, filename catch throw hackTrace e, js, filename

# Weave the source into stack trace.
function hackTrace error, js, filename
  traces = error?stack / \\n
  return error unless traces.length > 1
  colineno = /^(?:\/\*(\d+)\*\/)?(.*)?/
  for trace, i of traces
    continue if 0 > index = trace.indexOf filename
    [, lno]? = /:(\d+):/exec trace.slice index + filename.length
    continue unless +=lno
    {length} = '' + end = lno+4; lines ||= js / \\n
    for n from 1 >? lno-4 to end
      [, no || '', line] = colineno.exec lines[n-1] || ''
      traces[i] += "\n
        #{ (' '*5 + no)slice -5 }#{ '|+'charAt n is lno } #line"
  error <<< stack: traces.join \\n
