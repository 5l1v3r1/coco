# The main entry functions for
# [tokenizing](#lexer), [parsing](#grammar), and [compiling](#nodes)
# Coco source into JavaScript.

Coco = exports

# Override Jison's default lexer, so that it can accept
# the generic stream of tokens our lexer produces.
{lex}    = require \./lexer
{parser} = require \./parser
parser import
  yy    : nodes = require \./nodes
  lexer :
    lex           : -> [tag, @yytext, @yylineno] = @tokens[++@pos] or ['']; tag
    setInput      : -> @pos = -1; @tokens = it
    upcomingInput : -> ''

Coco import
  VERSION: \0.4.0b

  # Compiles a string of Coco code to JavaScript.
  compile: (code, options) -> parser.parse(lex code)compileRoot options

  # Parses a string or tokens of Coco code, returning the AST.
  nodes: -> parser.parse if typeof it is \string then lex it else it

  # Tokenizes a string of Coco code, returning the array of tokens.
  tokens: lex

  # Same as `tokens`, except that this skips [rewriting](#rewriter).
  lex: -> lex it, {+raw}

  # Runs Coco code directly.
  run: (code, options or {}) ->
    do Function Coco.compile code, options <<< {+bare}

Coco.nodes{parse, fromJSON} = nodes

if require.extensions
  # -> [node](#node)
  require(\./node) Coco
else
  # Attach `require` for debugging.
  Coco import {require}
  # Support Gecko JS Module.
  @EXPORTED_SYMBOLS = [\Coco] if "#{this}" is '[object BackstagePass]'
