# A simple **OptionParser** class to parse option flags from the command-line.
# Use it like so:
#
#     oparser = OptionParser switches
#     options = oparser.parse process.argv
#
# The first non-option is considered to be the start of the file (and file
# option) list, and all subsequent arguments are left unparsed.
exports.OptionParser = class
  # Initialize with a list of valid options, in the form:
  #
  #     [['-h', '--help', 'display this help message'], ...]
  #
  => @rules = it.map ([shortFlag, longFlag, description]) ->
    # Build a rule from a `-o` short flag, a `--output [DIR]` long flag,
    # and the description of what the option does.
    [longFlag, hasArg, isList] = LONG_FLAG.exec longFlag
    {name: longFlag.slice(2), shortFlag, longFlag, description, hasArg, isList}

  # Parse the list of arguments, populating an `options` object with all of the
  # specified options, and returning it. `options.arguments` will be an array
  # containing the remaining non-option arguments. This is a simpler API than
  # many option parsers that allow you to attach callback actions for every
  # flag. Instead, you're responsible for interpreting the options object.
  parse: (args, options = {}) ->
    # Expand merged flags. e.g.: `-wp` -> `-w -p`
    args = Array::concat.apply [], args.map ->
      if /^-\w{2,}/.test it then it.slice(1).split('').map(-> \- + it) else it
    `ARGS:`
    for arg, i of args
      if arg is \-- then literals = args.slice i+1; break
      for rule of @rules
        continue unless arg of [rule.shortFlag, rule.longFlag]
        value = if rule.hasArg then args[++i] else true
        if rule.isList
        then (options[rule.name] ||= []).push value
        else options[rule.name] = value
        `continue ARGS;`
      if FLAG.test arg
        console.error 'unrecognized option: %s', arg
        process.exit 1
      break
    literals ||= []
    options import {literals, arguments: args.slice i}

  # Return the help text for this **OptionParser**, listing and describing all
  # of the valid options, for `--help` and such.
  help: ->
    lines = ['Available options:']
    width = Math.max ...@rules.map -> it.longFlag.length
    pad   = Array(width >> 1).join '  '
    for rule of @rules
      sf = (rule.shortFlag &&+= \,) or '   '
      lf = (rule.longFlag + pad).slice 0, width
      lines.push "  #{sf} #{lf}  #{rule.description}"
    lines.join \\n

#### Regexes

FLAG      = /^-[-\w]+$/
LONG_FLAG = /// ^ --\w[-\w]+ (?= ( \s+ [^\s*]+ (\*)? )? ) ///
